using System.Core;

namespace MyNamespace1
{
	class AVerySimpleClass
	{
	}
	
	internal class MyClass1 : MyClass1Base
	{
	}
}

namespace
MyNamespace2
{
	public
	class
	MyClass2
	{
	}
}

namespace MyNamespace3 { internal class MyClass3 { } }

	namespace		



				MyNamespace4
	
	
	{
	
			public
	
class

					MyClass4{
			}
				}

namespace MyNamespace5
{
	public struct MyStruct1
	{
	}
	
	internal enum MyEnum1
	{
		Something = 1
	}
	
	public interface MyInterface1
	{
	}

	static class AStaticClass
	{
	}

	sealed partial class ASealedClass
	{
	}

	private abstract class AnAbstractClass
	{
	}
	
	public abstract class GenericClass<TSomething, TCommand>
	{
	}

	[TestFixture]
	class Program
    {
		private static int MYThing { get; set; }

		public const string _field = "lkj";

		[Category("hello", 15)]
        public static void get(int number, ASealedClass cls)
        {
			int myInt = 2;
        	var bleh = cls.ToString();
        	string.Format("Test (Thread: {0}}", bleh);
        }

		protected virtual string doIt() {
			return "";
		}

		public void ifdef
		{
			try {
				bleh
#if NET_2_0
			} catch {
				throw;
			}
#else
			} catch (Exception ex) {
				Log.Write(ex);
			}
#endif
		}
	}
}

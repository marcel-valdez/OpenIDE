OpenIDE.Net integrates with programming languages through both executable output and tcp communication.

------------------------------------------------------- GENERAL OUTPUT ---------------------------------------------------------

Error description with no line separators
	RESPONSE FORMAT:
		error|ERROR_DESCRIPTION

------------------------------------------------------- GENERAL OUTPUT ---------------------------------------------------------

Comment with no line separators
	RESPONSE FORMAT:
		comment|COMMENT

----------------------------------------------------- REQUIRED INTEGRATION -----------------------------------------------------
Initialize is sent to the plugin when the code engine starts. The CodeEngine will wait
for 5 seconds or until the plugin responsed with initialized through standard output. 
For as long as the plugin triggered by initialize is alive it can communicate with the 
CodeEngine through standard output.
	PARAMETER:
		initialize KEY_PATH

Shutdown is sent to the plugin when the code engine is shutting down
	PARAMETER:
		shutdown

Getting command definitions for this language extension
	PARAMETER:
		get-command-definitions
	
	RESPONSE FORMAT:
		// Wrapping the command name with [] means the command is optional
		// This is the definition response for the following commands:
		// new file FILE_NAME
		// new directory DIR_NAME

		new|"Template command for new file"
			file|"Creates a new file"
				FILE_NAME|"The path/name of the file you want to create" end
			end
			directory|"Creates a new directory"
				DIR_NAME|"Long description where every line
							will be trimmed and new line is replaced by space" end
			end
		end

Suppoerted file extensions. This determintes what files will be sent over for change tracking
	PARAMETER
		crawl-file-types
	
	RESPONSE FORMAT:
		.csproj|.cs

Crawl directories and/or files
	PARAMETER:
		crawl-source PATH_TO_FILE_CONTIAINING_LINE_PR_FILE_OR_DIR_TO_CRAWL
	
	RESPONSE FORMAT:
		// Project is optional. Other than that the hierarchy is as follows
		// Indentation is only to show hierarchy not required in output
		// Arguments in [] are optional
		//	typesearch => Is searchable under typesearch
		//	filesearch => Is searchable under file browse list

		[project|PROJECT-PATH|CUSTOM-JSON-INFO [|filesearch]]
			file|FILE-PATH [|filesearch]
				signature|PARENT|SIGNATURE|NAME|TYPE|SCOPE|LINE|COLUMN|CUSTOM-JSON-INFO [|typesearch]
				reference|SIGNATURE|LINE|COLUMN|CUSTOM-JSON-INFO

Retrieve signature from a location inside code
	PARAMETER:
		signature-from-position PATH_TO_FILE|LINE|COLUMN
	
	RESPONSE FORMAT (fixed lines):
		// The response have fixed lines as shown below
		// The position is the start and end position of
		// the reference under the position passed to it
		// If not found return nothing
		FILE_CONTAINING_REFERENCED_SIGNATURE
		REFERENCED_SIGNATURE
		REFERENCE_START_LINE|REFERENCE_START_COLUMN
		REFERENCE_END_LINE|REFERENCE_END_COLUMN

Go to definition
	PARAMETER:
		go-to-definition PATH_TO_FILE|LINE|COLUMN

	RESPONSE FORMAT
		Whatever specified in command definitions. Hopefully something like editor goto

Retrieve members from signature
	PARAMETER:
		members-from-signature SIGNATURE
	
	RESPONSE FORMAT:
		// A list if available members with descriptions
		// One line pr member. In the description part new line
		// is represented by [[newline]]
		SomeProperty|(Int) Some number
		Parse(string[])|(Returns string) Parses lines[[newline]]\tstring[] Lines

Various language plugin commands. This would be any command handled by the plugin
	PARAMETER
		Whatever specified in command definitions
	
	RESPONSE FORMAT:
		// Any supported oi commands you want executed
		// The error and comment general output commands are also supported
		// Below is a simple sample

		comment|File /home/me/myfile created
		editor goto /home/me/myfile|3|18
		editor setfocus



